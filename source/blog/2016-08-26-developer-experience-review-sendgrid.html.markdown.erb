---
title: "Developer Experience Review: Sendgrid"
date: 2016-08-26 14:42 UTC
tags: developer experience
icon: camera retro
published: false
---

This is the first of a new series of articles focussing on reviewing Developer Experience.

When you're trying to design a great Developer Experience it's always worth taking a good look at what others have done before. In this series I am going to document the current Developer Experience of some of the most well established developer focussed products available. The goal is not to tear down any specific brand but rather look at the complexities, the solutions, and the pitfalls of certain design decisions.

I'd like to thank initiatives like [UserOnboard](https://www.useronboard.com/onboarding-teardowns/) for giving me the inspiration for this.

## Criteria

I will be looking at the developer onboarding experience with a focus on:

* **Flow:** How well does the product guide me from landing on their site all the way to making a first API call?
* **Exploration:** How easy is it to get an idea of how their product works before committing to a paid plan / signing up?
* **Completeness:** Once I have my first integration in place, how hard is it to find the full reference documentation?

So with that in mind let's begin.

## Sendgrid

> Delivering your transactional and marketing email through one reliable platform.

_"SendGrid is a Boulder, Colorado-based transactional email delivery and management service. The company was founded by Isaac Saldana, Jose Lopez, and Tim Jenkins in 2009, and incubated through the TechStars accelerator program. As of 2013, SendGrid has raised over $27 million and has offices in Boulder, Denver, Orange, California, and London, and operations in New York City and San Francisco."_ - [Wikipedia](https://en.wikipedia.org/wiki/SendGrid)

I picked Sendgrid because they are well established, have been very developer focussed for years, abd they have a good reputation with developers in general.

### Landing

[`http://sendgrid.com/`](http://sendgrid.com/)

<%= dx_image 'sendgrid', 1, 'Landing Page' %>

A pretty simple starting point. To the point and a nice big "Get Started" button as our main call to action. Let's click that!

[`https://sendgrid.com/pricing/`](https://sendgrid.com/pricing/)

<%= dx_image 'sendgrid', 2, 'Pricing Page' %>

Interesting, not quite what I expected from Getting Started as a developer. Lots of paid plans.

When I scroll down though I see this.

[`https://sendgrid.com/pricing/`](https://sendgrid.com/pricing/)

<%= dx_image 'sendgrid', 3, 'Pricing Page' %>

Great! A free plan! Let's try this.

### Signup

[`https://app.sendgrid.com/signup`](https://app.sendgrid.com/signup)

<%= dx_image 'sendgrid', 4, 'Signup Form' %>

The sign up form is pretty straightforward. I fill in my details and continue.

<%= dx_image 'sendgrid', 5, 'Confirmation Question' %>

We take a quick dip into the inbox.

<%= dx_image 'sendgrid', 6, 'Confirmation Email' %>

Very pretty email, as is to be expected of an email company. When we click the big blue button we end up with the next step of our signup form. I somehow knew that previous one was too easy!

<%= dx_image 'sendgrid', 7, 'Signup form v2' %>

Interesting observations here:

* It's warning me of a scheduled maintenance even though I haven't finished signing up yet.
* I've now gotten to the point of supplying my whole name and address even before I've decided to use their product.

There are some interesting questions at the bottom of the form as well.

<%= dx_image 'sendgrid', 8, 'Signup form v2 - continued' %>

It's interesting to see how Sendgrid assume I already know what I need them for. Maybe they're not expecting a developer to do the signup process, though it is an option in the occupation section.

Let's save the form.

<%= dx_image 'sendgrid', 9, 'Pending verification' %>

I find this page very dissapointing. I've followed the "Get Started" button on their home page all the way here, and now they leave me hanging here with no further instructions as to how to continue.

The warning at the top informs me that my account is still to be activated, but as I click on it I see the link just gives me a video explaining that this has to do with the obvious anti-spam measures they have to take.

<%= dx_image 'sendgrid', 10, 'Video' %>

### Integration

I close that tab and go back to my logged in dashboard. As I scroll down I find the following steps hinting me that I have other things to do next.

[`https://app.sendgrid.com/`](https://app.sendgrid.com/)

<%= dx_image 'sendgrid', 11, 'Dashboard' %>

Interestingly enough non of these seem to link me to my API key, developer documentation, or any next steps to sending my first email.

Let's head back to the main site and see if we can find some documentation.

[`http://sendgrid.com/`](http://sendgrid.com/)

<%= dx_image 'sendgrid', 12, 'Homepage' %>

As we can see there's a documentation tab that expands into various sections. I click on the overview link.

[`https://sendgrid.com/docs/index.html`](https://sendgrid.com/docs/index.html)

<%= dx_image 'sendgrid', 13, 'Developer Documentation' %>

Ah much better. Sendgrid split their documentation into various sections:

* A generic **User Guide** explaining what Sendgrid is for the less technical. This is a great point for most people to understand the powerful features Sendgrid offers beyond the obvious.
* An **Integrate** section explaining the various different ways you can integrate Sengrid. This is a great idea as Sendgrid offers multiple application endpoints (SMTP, REST API, etc) and highlighting the differences can be very useful in early decision making.
* A **Glossary** to help you cut through the jargon of the email world and quickly get to terms with the terminology used across the rest of the documentation. I admit that although I'd advice you to keep your developer documentation jargon-free it's often hard to do and a glossary can help beginners to understand your industry.
* A **Code Examples** section with simple code samples to quickly get to grips with a first integration.

That last one is clearly the one I need so let's select that one.

[`https://sendgrid.com/docs/Integrate/Code_Examples/index.html`](https://sendgrid.com/docs/Integrate/Code_Examples/index.html)

<%= dx_image 'sendgrid', 14, 'Code Examples' %>

Interesting. I was expecting a list of programming languages but instead I was given a list of different API endpoints. What's odd is that V2 is positioned above V3. Isn't V3 newer and therefore better? This makes me wonder if V3 is stable or just a Beta. I decide to go with V3 anyway.

[`https://sendgrid.com/docs/Integrate/Code_Examples/v3_Mail/index.html`](https://sendgrid.com/docs/Integrate/Code_Examples/v3_Mail/index.html)

<%= dx_image 'sendgrid', 15, 'Programming languages' %>

Cool, let's pick Ruby as that's what I'm most familiar with.

[`https://sendgrid.com/docs/Integrate/Code_Examples/v3_Mail/ruby.html`](https://sendgrid.com/docs/Integrate/Code_Examples/v3_Mail/ruby.html)

<%= dx_image 'sendgrid', 16, 'Ruby Example' %>

The code sample is simple enough for a Rubyist to follow. On line 12 it asks me for an API key though, and I haven't seen one so far.

### API Key

I check my email inbox for an API key but they haven't emailed it to me, which is a good thing. Let's head over to the Sendgrid dashboard again. I find a link to API keys in the Settings.

[`https://app.sendgrid.com/settings/api_keys`](https://app.sendgrid.com/settings/api_keys)

<%= dx_image 'sendgrid', 17, 'Getting an API key' %>

Ok interesting how they haven't created one for me by default. I wonder what that's about. I click the big blue button.

<%= dx_image 'sendgrid', 18, 'Getting an API key - continued' %>

Apparently there are 2 kinds of API keys but at this point I'm not sure yet which one I need. I assume I need a regular one so I continue.

<%= dx_image 'sendgrid', 19, 'Getting an API key - continued' %>

This seems to be what I wanted. Let's tick the option to send emails and create our key.

<%= dx_image 'sendgrid', 20, 'Getting an API key - continued' %>

I have a key! I click on the key and it copies it to my clipboard for me. Nice!

### API Reponse

I go back to my code, add the key, and run the code. The output is as follows:

~~~sh
$ ruby test.rb
202

{"server"=>["nginx"], "date"=>["Fri, 26 Aug 2016 14:37:31 GMT"], "content-type"=>["text/plain; charset=utf-8"], "content-length"=>["0"], "connection"=>["close"], "x-message-id"=>["pfRkpys-Sk-sXKekBc5yzg"], "x-frame-options"=>["DENY"]}
~~~

The 202 is the response code, the next line is the body, and the last line is the headers. As an experienced developer I know that a response code in the 2** range is generally good, but then the response also returns the word **DENY** in the headers. So did this email send?

### API Reference

On the documentation overview earlier there was no direct link to the API reference but in the sidebar we do find such link.

[`https://sendgrid.com/docs/API_Reference/index.html`](https://sendgrid.com/docs/API_Reference/index.html)

<%= dx_image 'sendgrid', 21, 'Reference documentation' %>

As we used the V3 sample to send an email we click through to the "Mail Send V3" reference.

[`https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html`](https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html)

<%= dx_image 'sendgrid', 22, 'Reference documentation - continued' %>

This page has a lot of info and it tells us that indeed the status of 202 is a successful response. We also found a list of full response codes in the sidebar.

[`https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/errors.html`](https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/errors.html)

<%= dx_image 'sendgrid', 23, 'Reference documentation - continued' %>

### Conclusions

As simple as email might sound, Sendrid has the hard task to explain some difficult topics to developers. A big one is that they have more than one way to send an email. This makes their onboarding less seemless as it makes it hard to predict what a user is most likely to want. Additionally they have the tough task of explaining to people that they do more than just send emails.

#### The good

* Clean, modern UI
* Free to try
* API keys instead of usernames/passwords for making API calls

#### The bad

* "Get Started" leads to a pricing page and signup instead of running a user through the steps to get started
* After signup a developer is left with no next steps to continue with the integration
* The developer is left to guess where to get an API key and how to create it properlywhich API key to create
* There is no way to try their service without signing up - athough this is mostly due to anti-spam measures
* It takes 4 clicks to get to a first code sample from the homepage

Most of this points are probably a sign of a developer experience designed to optimise signups rather than activations. While this can be good for dealing with larger enterprises who don't mind the follow ups via email/phone it rarely works well with individual developers and startups.

## Next

That's it for this first post on Developer Experience. Let me know what you think of it and if I should continue. I'd also love to know who you think I should review next, and if you are interested in me reviewing your product then mosrt definitely let me know!
